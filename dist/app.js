!function(r){var t={};function e(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return r[o].call(n.exports,n,n.exports,e),n.l=!0,n.exports}e.m=r,e.c=t,e.d=function(r,t,o){e.o(r,t)||Object.defineProperty(r,t,{enumerable:!0,get:o})},e.r=function(r){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})},e.t=function(r,t){if(1&t&&(r=e(r)),8&t)return r;if(4&t&&"object"==typeof r&&r&&r.__esModule)return r;var o=Object.create(null);if(e.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:r}),2&t&&"string"!=typeof r)for(var n in r)e.d(o,n,function(t){return r[t]}.bind(null,n));return o},e.n=function(r){var t=r&&r.__esModule?function(){return r.default}:function(){return r};return e.d(t,"a",t),t},e.o=function(r,t){return Object.prototype.hasOwnProperty.call(r,t)},e.p="",e(e.s=0)}([function(r,t){new(function(){function r(){this.running=!0,this.canvas=document.getElementById("game-surface"),this.gl=this.canvas.getContext("webgl"),this.gl||(this.gl=this.canvas.getContext("experimental-webgl")),this.setClearColor(),this.clearScreen(),this.createShaders(),this.createProgram(),this.createBuffer(),this.mainRenderLoop()}return r.prototype.setClearColor=function(){this.gl.clearColor(.75,.85,.8,1)},r.prototype.clearScreen=function(){this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT)},r.prototype.createShaders=function(){this.vertexShader=this.addShader(this.vertexShaderSource,this.gl.VERTEX_SHADER),this.fragmentShader=this.addShader(this.fragmentShaderSource,this.gl.FRAGMENT_SHADER)},r.prototype.addShader=function(r,t){var e=this.gl.createShader(t);return this.gl.shaderSource(e,r),this.gl.compileShader(e),this.gl.getShaderParameter(e,this.gl.COMPILE_STATUS)||console.error("Error compiling shader ",this.gl.getShaderInfoLog(e)),e},r.prototype.createProgram=function(){this.program=this.gl.createProgram(),this.gl.attachShader(this.program,this.vertexShader),this.gl.attachShader(this.program,this.fragmentShader),this.gl.linkProgram(this.program),this.gl.getProgramParameter(this.program,this.gl.LINK_STATUS)||console.error("Could not link program",this.gl.getProgramInfoLog(this.program)),this.gl.validateProgram(this.program),this.gl.getProgramParameter(this.program,this.gl.VALIDATE_STATUS)||console.error("ERROR invalidating program",this.gl.getProgramInfoLog(this.program))},r.prototype.createBuffer=function(){var r=this.gl.createBuffer();this.gl.bindBuffer(this.gl.ARRAY_BUFFER,r),this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array([0,.5,1,0,0,-.5,-.5,0,1,0,.5,-.5,0,0,1]),this.gl.STATIC_DRAW);var t=this.gl.getAttribLocation(this.program,"vertPosition"),e=this.gl.getAttribLocation(this.program,"vertColor");this.gl.vertexAttribPointer(t,2,this.gl.FLOAT,!1,5*Float32Array.BYTES_PER_ELEMENT,0),this.gl.vertexAttribPointer(e,3,this.gl.FLOAT,!1,5*Float32Array.BYTES_PER_ELEMENT,2*Float32Array.BYTES_PER_ELEMENT),this.gl.enableVertexAttribArray(t),this.gl.enableVertexAttribArray(e)},r.prototype.stop=function(){this.running=!1},r.prototype.mainRenderLoop=function(){var r=this,t=function(){r.clearScreen(),r.gl.useProgram(r.program),r.gl.drawArrays(r.gl.TRIANGLES,0,3),r.running&&window.requestAnimationFrame(function(){return t()})};t()},Object.defineProperty(r.prototype,"vertexShaderSource",{get:function(){return"\n        precision mediump float;\n\n        // input\n        attribute vec2 vertPosition;\n        attribute vec3 vertColor;\n\n        // output\n        varying vec3 fragColor;\n\n        void main(){\n            fragColor = vertColor;\n            // 0.0 = z-index, last one always 1\n            gl_Position = vec4(vertPosition, 0.0, 1.0);\n        }\n        "},enumerable:!0,configurable:!0}),Object.defineProperty(r.prototype,"fragmentShaderSource",{get:function(){return"\n        precision mediump float;\n\n        // input\n        varying vec3 fragColor;\n\n        void main(){\n            // only output from fragment shader, color of a specific pixel\n            gl_FragColor = vec4(fragColor, 1.0);\n        }\n\n        "},enumerable:!0,configurable:!0}),r}())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,